// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.colorState.ColorStateData in improbable/color/color_state.proto.

namespace Improbable.ColorState
{
public struct ColorStateData : global::System.IEquatable<ColorStateData>
{
    public readonly Improbable.Math.Vector3f Value;

    public ColorStateData (Improbable.Math.Vector3f value)
    {
        Value = value;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is ColorStateData))
            return false;
        return Equals((ColorStateData) obj);
    }

    public static bool operator ==(ColorStateData obj1, ColorStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(ColorStateData obj1, ColorStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(ColorStateData obj)
    {
        return true
            && Value.Equals(obj.Value);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Value.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ColorStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.ColorState.ColorStateData, Schema.Improbable.ColorState.ColorStateData>
{
    static readonly ColorStateDataHelper _instance = new ColorStateDataHelper();
    public static ColorStateDataHelper Instance { get { return _instance; } }
    private ColorStateDataHelper() {}

    public Schema.Improbable.ColorState.ColorStateData ToProto(Improbable.ColorState.ColorStateData data)
    {
        var proto = new Schema.Improbable.ColorState.ColorStateData();
        proto.Value = Improbable.Math.Vector3fHelper.Instance.ToProto(data.Value);
        return proto;
    }

    //Shallow merge method
    public Improbable.ColorState.ColorStateData MergeFromProto(Schema.Improbable.ColorState.ColorStateData proto, bool[] statesToClear, Improbable.ColorState.ColorStateData data)
    {
        return new Improbable.ColorState.ColorStateData(
            proto.Value != null ? Improbable.Math.Vector3fHelper.Instance.FromProto(proto.Value) : data.Value
        );
    }

    public Improbable.ColorState.ColorStateData FromProto(Schema.Improbable.ColorState.ColorStateData proto)
    {
        return new Improbable.ColorState.ColorStateData(
            Improbable.Math.Vector3fHelper.Instance.FromProto(proto.Value)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.ColorState.ColorStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.ColorState.ColorStateData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.Value != null)
        {
            protoTo.Value = protoFrom.Value;
        }
    }
}
}
