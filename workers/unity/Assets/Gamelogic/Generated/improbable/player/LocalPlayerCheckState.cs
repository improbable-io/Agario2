// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.player.LocalPlayerCheckStateData in improbable/player/local_player_check_state.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Player
{
[ReaderInterface]
[CanonicalName("improbable.player.LocalPlayerCheckState", 1001)]
public interface LocalPlayerCheckStateReader : IEntityStateReader
{

}

public interface ILocalPlayerCheckStateUpdater : IEntityStateUpdater
{
    void FinishAndSend();
}

[WriterInterface]
[CanonicalName("improbable.player.LocalPlayerCheckState", 1001)]
public interface LocalPlayerCheckStateWriter : LocalPlayerCheckStateReader, IUpdateable<ILocalPlayerCheckStateUpdater> { }

public class LocalPlayerCheckState : global::Improbable.Entity.State.StateBase<Improbable.Player.LocalPlayerCheckStateData, Schema.Improbable.Player.LocalPlayerCheckStateData>, LocalPlayerCheckStateWriter, ILocalPlayerCheckStateUpdater
{
    public LocalPlayerCheckState(global::Improbable.EntityId entityId, Improbable.Player.LocalPlayerCheckStateData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Player.LocalPlayerCheckStateDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(LocalPlayerCheckState));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    
    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
    }

    public ILocalPlayerCheckStateUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new LocalPlayerCheckStateUpdate(EntityId, new bool[0], new Schema.Improbable.Player.LocalPlayerCheckStateData());
            }
            return this;
        }
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Player.LocalPlayerCheckStateData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Player.LocalPlayerCheckStateData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class LocalPlayerCheckStateUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Player.LocalPlayerCheckStateData, Schema.Improbable.Player.LocalPlayerCheckStateData>
{
    public const uint COMPONENT_ID = 1001;
    public LocalPlayerCheckStateUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Player.LocalPlayerCheckStateData proto)
        : base(entityId, statesToClear, Improbable.Player.LocalPlayerCheckStateDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new LocalPlayerCheckState(entityId, GetData(), stateSender);
    }

    public static LocalPlayerCheckStateUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Player.LocalPlayerCheckStateData>(proto.ComponentData, (int) COMPONENT_ID);
        return new LocalPlayerCheckStateUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
