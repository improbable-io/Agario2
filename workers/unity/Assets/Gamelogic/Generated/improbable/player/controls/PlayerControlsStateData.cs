// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.player.controls.PlayerControlsStateData in improbable/player/controls/player_controls_state.proto.

namespace Improbable.Player.Controls
{
public struct PlayerControlsStateData : global::System.IEquatable<PlayerControlsStateData>
{
    public readonly Improbable.Math.Vector3d MovementDirection;

    public PlayerControlsStateData (Improbable.Math.Vector3d movementDirection)
    {
        MovementDirection = movementDirection;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PlayerControlsStateData))
            return false;
        return Equals((PlayerControlsStateData) obj);
    }

    public static bool operator ==(PlayerControlsStateData obj1, PlayerControlsStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PlayerControlsStateData obj1, PlayerControlsStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PlayerControlsStateData obj)
    {
        return true
            && MovementDirection.Equals(obj.MovementDirection);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + MovementDirection.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PlayerControlsStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Player.Controls.PlayerControlsStateData, Schema.Improbable.Player.Controls.PlayerControlsStateData>
{
    static readonly PlayerControlsStateDataHelper _instance = new PlayerControlsStateDataHelper();
    public static PlayerControlsStateDataHelper Instance { get { return _instance; } }
    private PlayerControlsStateDataHelper() {}

    public Schema.Improbable.Player.Controls.PlayerControlsStateData ToProto(Improbable.Player.Controls.PlayerControlsStateData data)
    {
        var proto = new Schema.Improbable.Player.Controls.PlayerControlsStateData();
        proto.MovementDirection = Improbable.Math.Vector3dHelper.Instance.ToProto(data.MovementDirection);
        return proto;
    }

    //Shallow merge method
    public Improbable.Player.Controls.PlayerControlsStateData MergeFromProto(Schema.Improbable.Player.Controls.PlayerControlsStateData proto, bool[] statesToClear, Improbable.Player.Controls.PlayerControlsStateData data)
    {
        return new Improbable.Player.Controls.PlayerControlsStateData(
            proto.MovementDirection != null ? Improbable.Math.Vector3dHelper.Instance.FromProto(proto.MovementDirection) : data.MovementDirection
        );
    }

    public Improbable.Player.Controls.PlayerControlsStateData FromProto(Schema.Improbable.Player.Controls.PlayerControlsStateData proto)
    {
        return new Improbable.Player.Controls.PlayerControlsStateData(
            Improbable.Math.Vector3dHelper.Instance.FromProto(proto.MovementDirection)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Player.Controls.PlayerControlsStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Player.Controls.PlayerControlsStateData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.MovementDirection != null)
        {
            protoTo.MovementDirection = protoFrom.MovementDirection;
        }
    }
}
}
