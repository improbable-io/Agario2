// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.player.controls.PlayerControlsStateData in improbable/player/controls/player_controls_state.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Player.Controls
{
[ReaderInterface]
[CanonicalName("improbable.player.controls.PlayerControlsState", 1000)]
public interface PlayerControlsStateReader : IEntityStateReader
{
    Improbable.Math.Vector3d MovementDirection { get; }

    event System.Action<Improbable.Math.Vector3d> MovementDirectionUpdated;
}

public interface IPlayerControlsStateUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IPlayerControlsStateUpdater MovementDirection(Improbable.Math.Vector3d newValue);
}

[WriterInterface]
[CanonicalName("improbable.player.controls.PlayerControlsState", 1000)]
public interface PlayerControlsStateWriter : PlayerControlsStateReader, IUpdateable<IPlayerControlsStateUpdater> { }

public class PlayerControlsState : global::Improbable.Entity.State.StateBase<Improbable.Player.Controls.PlayerControlsStateData, Schema.Improbable.Player.Controls.PlayerControlsStateData>, PlayerControlsStateWriter, IPlayerControlsStateUpdater
{
    public PlayerControlsState(global::Improbable.EntityId entityId, Improbable.Player.Controls.PlayerControlsStateData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Player.Controls.PlayerControlsStateDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(PlayerControlsState));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public Improbable.Math.Vector3d MovementDirection { get { return Data.MovementDirection; } }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksMovementDirection =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> MovementDirectionUpdated
    {
        add
        {
            updatedCallbacksMovementDirection.Add(value);
            value(Data.MovementDirection);
        }
        remove { updatedCallbacksMovementDirection.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksMovementDirection);
    }

    public IPlayerControlsStateUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new PlayerControlsStateUpdate(EntityId, new bool[0], new Schema.Improbable.Player.Controls.PlayerControlsStateData());
            }
            return this;
        }
    }

    IPlayerControlsStateUpdater IPlayerControlsStateUpdater.MovementDirection(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.MovementDirection != null || !MovementDirection.Equals(newValue))
        {
            Updater.Proto.MovementDirection = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Player.Controls.PlayerControlsStateData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedMovementDirection = update.MovementDirection != null;
        anythingUpdated |= updatedMovementDirection;
        if (updatedMovementDirection) TriggerCallbacks(updatedCallbacksMovementDirection, Data.MovementDirection);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Player.Controls.PlayerControlsStateData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class PlayerControlsStateUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Player.Controls.PlayerControlsStateData, Schema.Improbable.Player.Controls.PlayerControlsStateData>
{
    public const uint COMPONENT_ID = 1000;
    public PlayerControlsStateUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Player.Controls.PlayerControlsStateData proto)
        : base(entityId, statesToClear, Improbable.Player.Controls.PlayerControlsStateDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new PlayerControlsState(entityId, GetData(), stateSender);
    }

    public static PlayerControlsStateUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Player.Controls.PlayerControlsStateData>(proto.ComponentData, (int) COMPONENT_ID);
        return new PlayerControlsStateUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
