// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.player.physical.PlayerStateData in improbable/player/physical/player_state.proto.

namespace Improbable.Player.Physical
{
public struct PlayerStateData : global::System.IEquatable<PlayerStateData>
{
    public readonly float ForceMagnitude;

    public PlayerStateData (float forceMagnitude)
    {
        ForceMagnitude = forceMagnitude;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PlayerStateData))
            return false;
        return Equals((PlayerStateData) obj);
    }

    public static bool operator ==(PlayerStateData obj1, PlayerStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PlayerStateData obj1, PlayerStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PlayerStateData obj)
    {
        return true
            && ForceMagnitude.Equals(obj.ForceMagnitude);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + ForceMagnitude.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PlayerStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Player.Physical.PlayerStateData, Schema.Improbable.Player.Physical.PlayerStateData>
{
    static readonly PlayerStateDataHelper _instance = new PlayerStateDataHelper();
    public static PlayerStateDataHelper Instance { get { return _instance; } }
    private PlayerStateDataHelper() {}

    public Schema.Improbable.Player.Physical.PlayerStateData ToProto(Improbable.Player.Physical.PlayerStateData data)
    {
        var proto = new Schema.Improbable.Player.Physical.PlayerStateData();
        proto.ForceMagnitude = data.ForceMagnitude;
        return proto;
    }

    //Shallow merge method
    public Improbable.Player.Physical.PlayerStateData MergeFromProto(Schema.Improbable.Player.Physical.PlayerStateData proto, bool[] statesToClear, Improbable.Player.Physical.PlayerStateData data)
    {
        return new Improbable.Player.Physical.PlayerStateData(
            proto.ForceMagnitudeSpecified ? proto.ForceMagnitude : data.ForceMagnitude
        );
    }

    public Improbable.Player.Physical.PlayerStateData FromProto(Schema.Improbable.Player.Physical.PlayerStateData proto)
    {
        return new Improbable.Player.Physical.PlayerStateData(
            proto.ForceMagnitude
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Player.Physical.PlayerStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Player.Physical.PlayerStateData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.ForceMagnitudeSpecified)
        {
            protoTo.ForceMagnitude = protoFrom.ForceMagnitude;
            protoTo.ForceMagnitudeSpecified = protoFrom.ForceMagnitudeSpecified;
        }
    }
}
}
