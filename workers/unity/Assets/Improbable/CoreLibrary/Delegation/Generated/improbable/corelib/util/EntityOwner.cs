// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.corelib.util.EntityOwnerData in improbable/corelib/util/entity_owner.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelib.Util
{
[ReaderInterface]
[CanonicalName("improbable.corelib.util.EntityOwner", 190113)]
public interface EntityOwnerReader : IEntityStateReader
{
    string OwnerId { get; }

    event System.Action<string> OwnerIdUpdated;
}

public interface IEntityOwnerUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    IEntityOwnerUpdater OwnerId(string newValue);
}

[WriterInterface]
[CanonicalName("improbable.corelib.util.EntityOwner", 190113)]
public interface EntityOwnerWriter : EntityOwnerReader, IUpdateable<IEntityOwnerUpdater> { }

public class EntityOwner : global::Improbable.Entity.State.StateBase<Improbable.Corelib.Util.EntityOwnerData, Schema.Improbable.Corelib.Util.EntityOwnerData>, EntityOwnerWriter, IEntityOwnerUpdater
{
    public EntityOwner(global::Improbable.EntityId entityId, Improbable.Corelib.Util.EntityOwnerData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelib.Util.EntityOwnerDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(EntityOwner));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public string OwnerId { get { return Data.OwnerId; } }

    private readonly global::System.Collections.Generic.List<System.Action<string>> updatedCallbacksOwnerId =
        new global::System.Collections.Generic.List<System.Action<string>>();
    public event System.Action<string> OwnerIdUpdated
    {
        add
        {
            updatedCallbacksOwnerId.Add(value);
            value(Data.OwnerId);
        }
        remove { updatedCallbacksOwnerId.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksOwnerId);
    }

    public IEntityOwnerUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new EntityOwnerUpdate(EntityId, new bool[1], new Schema.Improbable.Corelib.Util.EntityOwnerData());
            }
            return this;
        }
    }

    IEntityOwnerUpdater IEntityOwnerUpdater.OwnerId(string newValue)
    {
        if ((Updater.Proto.OwnerIdSpecified || Updater.StatesToClear != null && Updater.StatesToClear[0]) || !string.Equals(OwnerId, newValue))
        {
            if (newValue != null)
                Updater.Proto.OwnerId = newValue;
            else
                Updater.Proto.OwnerIdSpecified = false;
            Updater.StatesToClear[0] = newValue == null;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelib.Util.EntityOwnerData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedOwnerId = (update.OwnerIdSpecified || statesToClear != null && statesToClear[0]);
        anythingUpdated |= updatedOwnerId;
        if (updatedOwnerId) TriggerCallbacks(updatedCallbacksOwnerId, Data.OwnerId);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelib.Util.EntityOwnerData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class EntityOwnerUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelib.Util.EntityOwnerData, Schema.Improbable.Corelib.Util.EntityOwnerData>
{
    public const uint COMPONENT_ID = 190113;
    public EntityOwnerUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelib.Util.EntityOwnerData proto)
        : base(entityId, statesToClear, Improbable.Corelib.Util.EntityOwnerDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new EntityOwner(entityId, GetData(), stateSender);
    }

    public static EntityOwnerUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelib.Util.EntityOwnerData>(proto.ComponentData, (int) COMPONENT_ID);
        bool[] statesToClear = new bool[1];
        for (int i = 0; i < proto.FieldsToClear.Count; i++)
        {
            statesToClear[FieldIdToIndex(proto.FieldsToClear[i])] = true;
        }
        return new EntityOwnerUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), statesToClear, protoState);
    }

    private static uint FieldIdToIndex(uint id)
    {
        switch (id)
        {
            case 1: //owner_id
                return 0;
            default:
                throw new ArgumentException(string.Format("Unexpected error: {0} is not a valid clearable field number for state Improbable.Corelib.Util.EntityOwner.", id));
        }
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = { 1, };
}
}
