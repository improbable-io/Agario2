// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.subscriptions.PublisherStateData in improbable/corelibrary/subscriptions/publisher_state.proto.

namespace Improbable.Corelibrary.Subscriptions
{
public struct PublisherStateData : global::System.IEquatable<PublisherStateData>
{
    public readonly global::Improbable.Util.Collections.IReadOnlyDictionary<string, Improbable.Corelibrary.Subscriptions.SubscriberData> SubscriberData;

    public PublisherStateData (global::Improbable.Util.Collections.IReadOnlyDictionary<string, Improbable.Corelibrary.Subscriptions.SubscriberData> subscriberData)
    {
        SubscriberData = subscriberData;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is PublisherStateData))
            return false;
        return Equals((PublisherStateData) obj);
    }

    public static bool operator ==(PublisherStateData obj1, PublisherStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(PublisherStateData obj1, PublisherStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(PublisherStateData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.DictionariesEqual(SubscriberData, obj.SubscriberData);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (SubscriberData != null ? SubscriberData.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class PublisherStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Subscriptions.PublisherStateData, Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData>
{
    static readonly PublisherStateDataHelper _instance = new PublisherStateDataHelper();
    public static PublisherStateDataHelper Instance { get { return _instance; } }
    private PublisherStateDataHelper() {}

    public Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData ToProto(Improbable.Corelibrary.Subscriptions.PublisherStateData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData();
        global::Improbable.Tools.ToProto(data.SubscriberData, proto.SubscriberData, Improbable.Corelibrary.Subscriptions.PublisherStateDataHelper.SubscriberDataEntryHelper.Instance);
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Subscriptions.PublisherStateData MergeFromProto(Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData proto, bool[] statesToClear, Improbable.Corelibrary.Subscriptions.PublisherStateData data)
    {
        return new Improbable.Corelibrary.Subscriptions.PublisherStateData(
            (proto.SubscriberData.Count > 0 || statesToClear != null && statesToClear[0]) ? global::Improbable.Tools.FromProto(proto.SubscriberData, Improbable.Corelibrary.Subscriptions.PublisherStateDataHelper.SubscriberDataEntryHelper.Instance) : data.SubscriberData
        );
    }

    public Improbable.Corelibrary.Subscriptions.PublisherStateData FromProto(Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData proto)
    {
        return new Improbable.Corelibrary.Subscriptions.PublisherStateData(
            global::Improbable.Tools.FromProto(proto.SubscriberData, Improbable.Corelibrary.Subscriptions.PublisherStateDataHelper.SubscriberDataEntryHelper.Instance)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.SubscriberData.Count > 0 || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.SubscriberData.Clear();
            protoTo.SubscriberData.AddRange(protoFrom.SubscriberData);
        }
    }

    //For internal use only, not to be used by user code
    public sealed class SubscriberDataEntryHelper : global::Improbable.Tools.IProtoKeyValueConverter<string, Improbable.Corelibrary.Subscriptions.SubscriberData, Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData.SubscriberDataEntry>
    {
        static readonly SubscriberDataEntryHelper _instance = new SubscriberDataEntryHelper();
        public static SubscriberDataEntryHelper Instance { get { return _instance; } }
        private SubscriberDataEntryHelper() {}

        public Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData.SubscriberDataEntry ToProto(System.Collections.Generic.KeyValuePair<string, Improbable.Corelibrary.Subscriptions.SubscriberData> keyValue)
        {
            var proto = new Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData.SubscriberDataEntry();
            proto.Key = keyValue.Key;
            proto.Value = Improbable.Corelibrary.Subscriptions.SubscriberDataHelper.Instance.ToProto(keyValue.Value);
            return proto;
        }

        public global::System.Collections.Generic.KeyValuePair<string, Improbable.Corelibrary.Subscriptions.SubscriberData> FromProto(Schema.Improbable.Corelibrary.Subscriptions.PublisherStateData.SubscriberDataEntry proto)
        {
            return new global::System.Collections.Generic.KeyValuePair<string, Improbable.Corelibrary.Subscriptions.SubscriberData>(proto.Key, Improbable.Corelibrary.Subscriptions.SubscriberDataHelper.Instance.FromProto(proto.Value));
        }
    }
}
}
