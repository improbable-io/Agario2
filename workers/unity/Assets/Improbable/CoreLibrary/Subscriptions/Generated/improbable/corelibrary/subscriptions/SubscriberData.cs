// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.subscriptions.SubscriberData in improbable/corelibrary/subscriptions/subscriber_data.proto.

namespace Improbable.Corelibrary.Subscriptions
{
public struct SubscriberData : global::System.IEquatable<SubscriberData>
{
    public readonly global::Improbable.Util.Collections.IReadOnlyDictionary<string, Improbable.Corelibrary.Subscriptions.SubscribedEntities> Subscribers;
    public readonly long SequenceNumber;

    public SubscriberData (global::Improbable.Util.Collections.IReadOnlyDictionary<string, Improbable.Corelibrary.Subscriptions.SubscribedEntities> subscribers,
        long sequenceNumber)
    {
        Subscribers = subscribers;
        SequenceNumber = sequenceNumber;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is SubscriberData))
            return false;
        return Equals((SubscriberData) obj);
    }

    public static bool operator ==(SubscriberData obj1, SubscriberData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(SubscriberData obj1, SubscriberData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(SubscriberData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.DictionariesEqual(Subscribers, obj.Subscribers)
            && SequenceNumber.Equals(obj.SequenceNumber);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (Subscribers != null ? Subscribers.GetHashCode() : 0);
        res = (res * 977) + SequenceNumber.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class SubscriberDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Subscriptions.SubscriberData, Schema.Improbable.Corelibrary.Subscriptions.SubscriberData>
{
    static readonly SubscriberDataHelper _instance = new SubscriberDataHelper();
    public static SubscriberDataHelper Instance { get { return _instance; } }
    private SubscriberDataHelper() {}

    public Schema.Improbable.Corelibrary.Subscriptions.SubscriberData ToProto(Improbable.Corelibrary.Subscriptions.SubscriberData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Subscriptions.SubscriberData();
        global::Improbable.Tools.ToProto(data.Subscribers, proto.Subscribers, Improbable.Corelibrary.Subscriptions.SubscriberDataHelper.SubscribersEntryHelper.Instance);
        proto.SequenceNumber = data.SequenceNumber;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Subscriptions.SubscriberData MergeFromProto(Schema.Improbable.Corelibrary.Subscriptions.SubscriberData proto, bool[] statesToClear, Improbable.Corelibrary.Subscriptions.SubscriberData data)
    {
        return new Improbable.Corelibrary.Subscriptions.SubscriberData(
            (proto.Subscribers.Count > 0 || statesToClear != null && statesToClear[0]) ? global::Improbable.Tools.FromProto(proto.Subscribers, Improbable.Corelibrary.Subscriptions.SubscriberDataHelper.SubscribersEntryHelper.Instance) : data.Subscribers,
            proto.SequenceNumberSpecified ? proto.SequenceNumber : data.SequenceNumber
        );
    }

    public Improbable.Corelibrary.Subscriptions.SubscriberData FromProto(Schema.Improbable.Corelibrary.Subscriptions.SubscriberData proto)
    {
        return new Improbable.Corelibrary.Subscriptions.SubscriberData(
            global::Improbable.Tools.FromProto(proto.Subscribers, Improbable.Corelibrary.Subscriptions.SubscriberDataHelper.SubscribersEntryHelper.Instance),
            proto.SequenceNumber
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Subscriptions.SubscriberData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Subscriptions.SubscriberData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.Subscribers.Count > 0 || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.Subscribers.Clear();
            protoTo.Subscribers.AddRange(protoFrom.Subscribers);
        }
        if (protoFrom.SequenceNumberSpecified)
        {
            protoTo.SequenceNumber = protoFrom.SequenceNumber;
            protoTo.SequenceNumberSpecified = protoFrom.SequenceNumberSpecified;
        }
    }

    //For internal use only, not to be used by user code
    public sealed class SubscribersEntryHelper : global::Improbable.Tools.IProtoKeyValueConverter<string, Improbable.Corelibrary.Subscriptions.SubscribedEntities, Schema.Improbable.Corelibrary.Subscriptions.SubscriberData.SubscribersEntry>
    {
        static readonly SubscribersEntryHelper _instance = new SubscribersEntryHelper();
        public static SubscribersEntryHelper Instance { get { return _instance; } }
        private SubscribersEntryHelper() {}

        public Schema.Improbable.Corelibrary.Subscriptions.SubscriberData.SubscribersEntry ToProto(System.Collections.Generic.KeyValuePair<string, Improbable.Corelibrary.Subscriptions.SubscribedEntities> keyValue)
        {
            var proto = new Schema.Improbable.Corelibrary.Subscriptions.SubscriberData.SubscribersEntry();
            proto.Key = keyValue.Key;
            proto.Value = Improbable.Corelibrary.Subscriptions.SubscribedEntitiesHelper.Instance.ToProto(keyValue.Value);
            return proto;
        }

        public global::System.Collections.Generic.KeyValuePair<string, Improbable.Corelibrary.Subscriptions.SubscribedEntities> FromProto(Schema.Improbable.Corelibrary.Subscriptions.SubscriberData.SubscribersEntry proto)
        {
            return new global::System.Collections.Generic.KeyValuePair<string, Improbable.Corelibrary.Subscriptions.SubscribedEntities>(proto.Key, Improbable.Corelibrary.Subscriptions.SubscribedEntitiesHelper.Instance.FromProto(proto.Value));
        }
    }
}
}
