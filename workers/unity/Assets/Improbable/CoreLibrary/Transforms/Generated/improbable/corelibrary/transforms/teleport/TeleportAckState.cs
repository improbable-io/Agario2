// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.teleport.TeleportAckStateData in improbable/corelibrary/transforms/teleport/teleport_ack_state.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelibrary.Transforms.Teleport
{
[ReaderInterface]
[CanonicalName("improbable.corelibrary.transforms.teleport.TeleportAckState", 1901205)]
public interface TeleportAckStateReader : IEntityStateReader
{
    int LastExecutedRequest { get; }

    event System.Action<int> LastExecutedRequestUpdated;
}

public interface ITeleportAckStateUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    ITeleportAckStateUpdater LastExecutedRequest(int newValue);
}

[WriterInterface]
[CanonicalName("improbable.corelibrary.transforms.teleport.TeleportAckState", 1901205)]
public interface TeleportAckStateWriter : TeleportAckStateReader, IUpdateable<ITeleportAckStateUpdater> { }

public class TeleportAckState : global::Improbable.Entity.State.StateBase<Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData, Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData>, TeleportAckStateWriter, ITeleportAckStateUpdater
{
    public TeleportAckState(global::Improbable.EntityId entityId, Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(TeleportAckState));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public int LastExecutedRequest { get { return Data.LastExecutedRequest; } }

    private readonly global::System.Collections.Generic.List<System.Action<int>> updatedCallbacksLastExecutedRequest =
        new global::System.Collections.Generic.List<System.Action<int>>();
    public event System.Action<int> LastExecutedRequestUpdated
    {
        add
        {
            updatedCallbacksLastExecutedRequest.Add(value);
            value(Data.LastExecutedRequest);
        }
        remove { updatedCallbacksLastExecutedRequest.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksLastExecutedRequest);
    }

    public ITeleportAckStateUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new TeleportAckStateUpdate(EntityId, new bool[0], new Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData());
            }
            return this;
        }
    }

    ITeleportAckStateUpdater ITeleportAckStateUpdater.LastExecutedRequest(int newValue)
    {
        if (Updater.Proto.LastExecutedRequestSpecified || !LastExecutedRequest.Equals(newValue))
        {
            Updater.Proto.LastExecutedRequest = newValue;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedLastExecutedRequest = update.LastExecutedRequestSpecified;
        anythingUpdated |= updatedLastExecutedRequest;
        if (updatedLastExecutedRequest) TriggerCallbacks(updatedCallbacksLastExecutedRequest, Data.LastExecutedRequest);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class TeleportAckStateUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData, Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData>
{
    public const uint COMPONENT_ID = 1901205;
    public TeleportAckStateUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData proto)
        : base(entityId, statesToClear, Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new TeleportAckState(entityId, GetData(), stateSender);
    }

    public static TeleportAckStateUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportAckStateData>(proto.ComponentData, (int) COMPONENT_ID);
        return new TeleportAckStateUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), null, protoState);
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = {};
}
}
