// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.TransformStateData in improbable/corelibrary/transforms/transform_state.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelibrary.Transforms
{
[ReaderInterface]
[CanonicalName("improbable.corelibrary.transforms.TransformState", 1901201)]
public interface TransformStateReader : IEntityStateReader
{
    Improbable.Math.Vector3d LocalPosition { get; }
    Improbable.Corelib.Math.Quaternion LocalRotation { get; }
    Improbable.Corelibrary.Transforms.Parent? Parent { get; }
    Improbable.Math.Vector3d Pivot { get; }
    float Timestamp { get; }

    event System.Action<Improbable.Math.Vector3d> LocalPositionUpdated;
    event System.Action<Improbable.Corelib.Math.Quaternion> LocalRotationUpdated;
    event System.Action<Improbable.Corelibrary.Transforms.Parent?> ParentUpdated;
    event System.Action<Improbable.Math.Vector3d> PivotUpdated;
    event System.Action<float> TimestampUpdated;
}

public interface ITransformStateUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    ITransformStateUpdater LocalPosition(Improbable.Math.Vector3d newValue);
    ITransformStateUpdater LocalRotation(Improbable.Corelib.Math.Quaternion newValue);
    ITransformStateUpdater Parent(Improbable.Corelibrary.Transforms.Parent? newValue);
    ITransformStateUpdater Pivot(Improbable.Math.Vector3d newValue);
    ITransformStateUpdater Timestamp(float newValue);
}

[WriterInterface]
[CanonicalName("improbable.corelibrary.transforms.TransformState", 1901201)]
public interface TransformStateWriter : TransformStateReader, IUpdateable<ITransformStateUpdater> { }

public class TransformState : global::Improbable.Entity.State.StateBase<Improbable.Corelibrary.Transforms.TransformStateData, Schema.Improbable.Corelibrary.Transforms.TransformStateData>, TransformStateWriter, ITransformStateUpdater
{
    public TransformState(global::Improbable.EntityId entityId, Improbable.Corelibrary.Transforms.TransformStateData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelibrary.Transforms.TransformStateDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(TransformState));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public Improbable.Math.Vector3d LocalPosition { get { return Data.LocalPosition; } }
    public Improbable.Corelib.Math.Quaternion LocalRotation { get { return Data.LocalRotation; } }
    public Improbable.Corelibrary.Transforms.Parent? Parent { get { return Data.Parent; } }
    public Improbable.Math.Vector3d Pivot { get { return Data.Pivot; } }
    public float Timestamp { get { return Data.Timestamp; } }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksLocalPosition =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> LocalPositionUpdated
    {
        add
        {
            updatedCallbacksLocalPosition.Add(value);
            value(Data.LocalPosition);
        }
        remove { updatedCallbacksLocalPosition.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Corelib.Math.Quaternion>> updatedCallbacksLocalRotation =
        new global::System.Collections.Generic.List<System.Action<Improbable.Corelib.Math.Quaternion>>();
    public event System.Action<Improbable.Corelib.Math.Quaternion> LocalRotationUpdated
    {
        add
        {
            updatedCallbacksLocalRotation.Add(value);
            value(Data.LocalRotation);
        }
        remove { updatedCallbacksLocalRotation.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Corelibrary.Transforms.Parent?>> updatedCallbacksParent =
        new global::System.Collections.Generic.List<System.Action<Improbable.Corelibrary.Transforms.Parent?>>();
    public event System.Action<Improbable.Corelibrary.Transforms.Parent?> ParentUpdated
    {
        add
        {
            updatedCallbacksParent.Add(value);
            value(Data.Parent);
        }
        remove { updatedCallbacksParent.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>> updatedCallbacksPivot =
        new global::System.Collections.Generic.List<System.Action<Improbable.Math.Vector3d>>();
    public event System.Action<Improbable.Math.Vector3d> PivotUpdated
    {
        add
        {
            updatedCallbacksPivot.Add(value);
            value(Data.Pivot);
        }
        remove { updatedCallbacksPivot.Remove(value); }
    }

    private readonly global::System.Collections.Generic.List<System.Action<float>> updatedCallbacksTimestamp =
        new global::System.Collections.Generic.List<System.Action<float>>();
    public event System.Action<float> TimestampUpdated
    {
        add
        {
            updatedCallbacksTimestamp.Add(value);
            value(Data.Timestamp);
        }
        remove { updatedCallbacksTimestamp.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksLocalPosition);
        UnsubscribeEventHandler(visualizer, updatedCallbacksLocalRotation);
        UnsubscribeEventHandler(visualizer, updatedCallbacksParent);
        UnsubscribeEventHandler(visualizer, updatedCallbacksPivot);
        UnsubscribeEventHandler(visualizer, updatedCallbacksTimestamp);
    }

    public ITransformStateUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new TransformStateUpdate(EntityId, new bool[1], new Schema.Improbable.Corelibrary.Transforms.TransformStateData());
            }
            return this;
        }
    }

    ITransformStateUpdater ITransformStateUpdater.LocalPosition(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.LocalPosition != null || !LocalPosition.Equals(newValue))
        {
            Updater.Proto.LocalPosition = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    ITransformStateUpdater ITransformStateUpdater.LocalRotation(Improbable.Corelib.Math.Quaternion newValue)
    {
        if (Updater.Proto.LocalRotation != null || !LocalRotation.Equals(newValue))
        {
            Updater.Proto.LocalRotation = Improbable.Corelib.Math.QuaternionHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    ITransformStateUpdater ITransformStateUpdater.Parent(Improbable.Corelibrary.Transforms.Parent? newValue)
    {
        if ((Updater.Proto.Parent != null || Updater.StatesToClear != null && Updater.StatesToClear[0]) || !global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(Parent, newValue))
        {
            if (newValue != null)
                Updater.Proto.Parent = Improbable.Corelibrary.Transforms.ParentHelper.Instance.ToProto(newValue.Value);
            else
                Updater.Proto.Parent = null;
            Updater.StatesToClear[0] = newValue == null;
        }
        return this;
    }

    ITransformStateUpdater ITransformStateUpdater.Pivot(Improbable.Math.Vector3d newValue)
    {
        if (Updater.Proto.Pivot != null || !Pivot.Equals(newValue))
        {
            Updater.Proto.Pivot = Improbable.Math.Vector3dHelper.Instance.ToProto(newValue);
        }
        return this;
    }

    ITransformStateUpdater ITransformStateUpdater.Timestamp(float newValue)
    {
        if (Updater.Proto.TimestampSpecified || !Timestamp.Equals(newValue))
        {
            Updater.Proto.Timestamp = newValue;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelibrary.Transforms.TransformStateData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedLocalPosition = update.LocalPosition != null;
        anythingUpdated |= updatedLocalPosition;
        if (updatedLocalPosition) TriggerCallbacks(updatedCallbacksLocalPosition, Data.LocalPosition);

        bool updatedLocalRotation = update.LocalRotation != null;
        anythingUpdated |= updatedLocalRotation;
        if (updatedLocalRotation) TriggerCallbacks(updatedCallbacksLocalRotation, Data.LocalRotation);

        bool updatedParent = (update.Parent != null || statesToClear != null && statesToClear[0]);
        anythingUpdated |= updatedParent;
        if (updatedParent) TriggerCallbacks(updatedCallbacksParent, Data.Parent);

        bool updatedPivot = update.Pivot != null;
        anythingUpdated |= updatedPivot;
        if (updatedPivot) TriggerCallbacks(updatedCallbacksPivot, Data.Pivot);

        bool updatedTimestamp = update.TimestampSpecified;
        anythingUpdated |= updatedTimestamp;
        if (updatedTimestamp) TriggerCallbacks(updatedCallbacksTimestamp, Data.Timestamp);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelibrary.Transforms.TransformStateData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class TransformStateUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelibrary.Transforms.TransformStateData, Schema.Improbable.Corelibrary.Transforms.TransformStateData>
{
    public const uint COMPONENT_ID = 1901201;
    public TransformStateUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelibrary.Transforms.TransformStateData proto)
        : base(entityId, statesToClear, Improbable.Corelibrary.Transforms.TransformStateDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new TransformState(entityId, GetData(), stateSender);
    }

    public static TransformStateUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelibrary.Transforms.TransformStateData>(proto.ComponentData, (int) COMPONENT_ID);
        bool[] statesToClear = new bool[1];
        for (int i = 0; i < proto.FieldsToClear.Count; i++)
        {
            statesToClear[FieldIdToIndex(proto.FieldsToClear[i])] = true;
        }
        return new TransformStateUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), statesToClear, protoState);
    }

    private static uint FieldIdToIndex(uint id)
    {
        switch (id)
        {
            case 3: //parent
                return 0;
            default:
                throw new ArgumentException(string.Format("Unexpected error: {0} is not a valid clearable field number for state Improbable.Corelibrary.Transforms.TransformState.", id));
        }
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = { 3, };
}
}
