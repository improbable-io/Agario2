// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.TransformHierarchyStateData in improbable/corelibrary/transforms/transform_hierarchy_state.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelibrary.Transforms
{
[ReaderInterface]
[CanonicalName("improbable.corelibrary.transforms.TransformHierarchyState", 1901203)]
public interface TransformHierarchyStateReader : IEntityStateReader
{
    global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child> Children { get; }

    event System.Action<global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child>> ChildrenUpdated;
}

public interface ITransformHierarchyStateUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    ITransformHierarchyStateUpdater Children(global::System.Collections.Generic.IList<Improbable.Corelibrary.Transforms.Child> newValue);
}

[WriterInterface]
[CanonicalName("improbable.corelibrary.transforms.TransformHierarchyState", 1901203)]
public interface TransformHierarchyStateWriter : TransformHierarchyStateReader, IUpdateable<ITransformHierarchyStateUpdater> { }

public class TransformHierarchyState : global::Improbable.Entity.State.StateBase<Improbable.Corelibrary.Transforms.TransformHierarchyStateData, Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData>, TransformHierarchyStateWriter, ITransformHierarchyStateUpdater
{
    public TransformHierarchyState(global::Improbable.EntityId entityId, Improbable.Corelibrary.Transforms.TransformHierarchyStateData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelibrary.Transforms.TransformHierarchyStateDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(TransformHierarchyState));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child> Children { get { return Data.Children; } }

    private readonly global::System.Collections.Generic.List<System.Action<global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child>>> updatedCallbacksChildren =
        new global::System.Collections.Generic.List<System.Action<global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child>>>();
    public event System.Action<global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child>> ChildrenUpdated
    {
        add
        {
            updatedCallbacksChildren.Add(value);
            value(Data.Children);
        }
        remove { updatedCallbacksChildren.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksChildren);
    }

    public ITransformHierarchyStateUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new TransformHierarchyStateUpdate(EntityId, new bool[1], new Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData());
            }
            return this;
        }
    }

    ITransformHierarchyStateUpdater ITransformHierarchyStateUpdater.Children(global::System.Collections.Generic.IList<Improbable.Corelibrary.Transforms.Child> newValue)
    {
        if ((Updater.Proto.Children.Count > 0 || Updater.StatesToClear != null && Updater.StatesToClear[0]) || !global::Improbable.Util.Collections.CollectionUtil.ListsEqual(Children, newValue))
        {
            global::Improbable.Tools.ToProto<Improbable.Corelibrary.Transforms.Child, Schema.Improbable.Corelibrary.Transforms.Child>(newValue, Updater.Proto.Children, Improbable.Corelibrary.Transforms.ChildHelper.Instance);
            Updater.StatesToClear[0] = newValue.Count == 0;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedChildren = (update.Children.Count > 0 || statesToClear != null && statesToClear[0]);
        anythingUpdated |= updatedChildren;
        if (updatedChildren) TriggerCallbacks(updatedCallbacksChildren, Data.Children);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class TransformHierarchyStateUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelibrary.Transforms.TransformHierarchyStateData, Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData>
{
    public const uint COMPONENT_ID = 1901203;
    public TransformHierarchyStateUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData proto)
        : base(entityId, statesToClear, Improbable.Corelibrary.Transforms.TransformHierarchyStateDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new TransformHierarchyState(entityId, GetData(), stateSender);
    }

    public static TransformHierarchyStateUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData>(proto.ComponentData, (int) COMPONENT_ID);
        bool[] statesToClear = new bool[1];
        for (int i = 0; i < proto.FieldsToClear.Count; i++)
        {
            statesToClear[FieldIdToIndex(proto.FieldsToClear[i])] = true;
        }
        return new TransformHierarchyStateUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), statesToClear, protoState);
    }

    private static uint FieldIdToIndex(uint id)
    {
        switch (id)
        {
            case 1: //children
                return 0;
            default:
                throw new ArgumentException(string.Format("Unexpected error: {0} is not a valid clearable field number for state Improbable.Corelibrary.Transforms.TransformHierarchyState.", id));
        }
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = { 1, };
}
}
