// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.TransformHierarchyStateData in improbable/corelibrary/transforms/transform_hierarchy_state.proto.

namespace Improbable.Corelibrary.Transforms
{
public struct TransformHierarchyStateData : global::System.IEquatable<TransformHierarchyStateData>
{
    public readonly global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child> Children;

    public TransformHierarchyStateData (global::Improbable.Util.Collections.IReadOnlyList<Improbable.Corelibrary.Transforms.Child> children)
    {
        Children = children;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TransformHierarchyStateData))
            return false;
        return Equals((TransformHierarchyStateData) obj);
    }

    public static bool operator ==(TransformHierarchyStateData obj1, TransformHierarchyStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TransformHierarchyStateData obj1, TransformHierarchyStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TransformHierarchyStateData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.ListsEqual(Children, obj.Children);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (Children != null ? Children.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TransformHierarchyStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Transforms.TransformHierarchyStateData, Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData>
{
    static readonly TransformHierarchyStateDataHelper _instance = new TransformHierarchyStateDataHelper();
    public static TransformHierarchyStateDataHelper Instance { get { return _instance; } }
    private TransformHierarchyStateDataHelper() {}

    public Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData ToProto(Improbable.Corelibrary.Transforms.TransformHierarchyStateData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData();
        global::Improbable.Tools.ToProto<Improbable.Corelibrary.Transforms.Child, Schema.Improbable.Corelibrary.Transforms.Child>(data.Children, proto.Children, Improbable.Corelibrary.Transforms.ChildHelper.Instance);
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Transforms.TransformHierarchyStateData MergeFromProto(Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData proto, bool[] statesToClear, Improbable.Corelibrary.Transforms.TransformHierarchyStateData data)
    {
        return new Improbable.Corelibrary.Transforms.TransformHierarchyStateData(
            (proto.Children.Count > 0 || statesToClear != null && statesToClear[0]) ? global::Improbable.Tools.FromProto<Improbable.Corelibrary.Transforms.Child, Schema.Improbable.Corelibrary.Transforms.Child>(proto.Children, Improbable.Corelibrary.Transforms.ChildHelper.Instance) : data.Children
        );
    }

    public Improbable.Corelibrary.Transforms.TransformHierarchyStateData FromProto(Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData proto)
    {
        return new Improbable.Corelibrary.Transforms.TransformHierarchyStateData(
            global::Improbable.Tools.FromProto<Improbable.Corelibrary.Transforms.Child, Schema.Improbable.Corelibrary.Transforms.Child>(proto.Children, Improbable.Corelibrary.Transforms.ChildHelper.Instance)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Transforms.TransformHierarchyStateData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.Children.Count > 0 || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.Children.Clear();
            protoTo.Children.AddRange(protoFrom.Children);
        }
    }
}
}
