// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.TransformExceptionStateData in improbable/corelibrary/transforms/transform_exception_state.proto.

namespace Improbable.Corelibrary.Transforms
{
public struct TransformExceptionStateData : global::System.IEquatable<TransformExceptionStateData>
{
    public readonly Improbable.EntityId? ParentNotFound;

    public TransformExceptionStateData (Improbable.EntityId? parentNotFound)
    {
        ParentNotFound = parentNotFound;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TransformExceptionStateData))
            return false;
        return Equals((TransformExceptionStateData) obj);
    }

    public static bool operator ==(TransformExceptionStateData obj1, TransformExceptionStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TransformExceptionStateData obj1, TransformExceptionStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TransformExceptionStateData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(ParentNotFound, obj.ParentNotFound);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (ParentNotFound != null ? ParentNotFound.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TransformExceptionStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Transforms.TransformExceptionStateData, Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData>
{
    static readonly TransformExceptionStateDataHelper _instance = new TransformExceptionStateDataHelper();
    public static TransformExceptionStateDataHelper Instance { get { return _instance; } }
    private TransformExceptionStateDataHelper() {}

    public Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData ToProto(Improbable.Corelibrary.Transforms.TransformExceptionStateData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData();
        if (data.ParentNotFound != null) proto.ParentNotFound = Improbable.EntityIdHelper.Instance.ToProto(data.ParentNotFound.Value);
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Transforms.TransformExceptionStateData MergeFromProto(Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData proto, bool[] statesToClear, Improbable.Corelibrary.Transforms.TransformExceptionStateData data)
    {
        return new Improbable.Corelibrary.Transforms.TransformExceptionStateData(
            (proto.ParentNotFoundSpecified || statesToClear != null && statesToClear[0]) ? (!proto.ParentNotFoundSpecified ? (Improbable.EntityId?) null : Improbable.EntityIdHelper.Instance.FromProto(proto.ParentNotFound)) : data.ParentNotFound
        );
    }

    public Improbable.Corelibrary.Transforms.TransformExceptionStateData FromProto(Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData proto)
    {
        return new Improbable.Corelibrary.Transforms.TransformExceptionStateData(
            !proto.ParentNotFoundSpecified ? (Improbable.EntityId?) null : Improbable.EntityIdHelper.Instance.FromProto(proto.ParentNotFound)
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.ParentNotFoundSpecified || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.ParentNotFound = protoFrom.ParentNotFound;
            protoTo.ParentNotFoundSpecified = protoFrom.ParentNotFoundSpecified;
        }
    }
}
}
