// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.global.GlobalTransformStateData in improbable/corelibrary/transforms/global/global_transform_state.proto.

namespace Improbable.Corelibrary.Transforms.Global
{
public struct GlobalTransformStateData : global::System.IEquatable<GlobalTransformStateData>
{
    public readonly Improbable.Math.Coordinates Position;
    public readonly Improbable.Corelib.Math.Quaternion Rotation;
    public readonly Improbable.Math.Vector3d Pivot;
    public readonly float Timestamp;

    public GlobalTransformStateData (Improbable.Math.Coordinates position,
        Improbable.Corelib.Math.Quaternion rotation,
        Improbable.Math.Vector3d pivot,
        float timestamp)
    {
        Position = position;
        Rotation = rotation;
        Pivot = pivot;
        Timestamp = timestamp;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is GlobalTransformStateData))
            return false;
        return Equals((GlobalTransformStateData) obj);
    }

    public static bool operator ==(GlobalTransformStateData obj1, GlobalTransformStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(GlobalTransformStateData obj1, GlobalTransformStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(GlobalTransformStateData obj)
    {
        return true
            && Position.Equals(obj.Position)
            && Rotation.Equals(obj.Rotation)
            && Pivot.Equals(obj.Pivot)
            && Timestamp.Equals(obj.Timestamp);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + Position.GetHashCode();
        res = (res * 977) + Rotation.GetHashCode();
        res = (res * 977) + Pivot.GetHashCode();
        res = (res * 977) + Timestamp.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class GlobalTransformStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData, Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData>
{
    static readonly GlobalTransformStateDataHelper _instance = new GlobalTransformStateDataHelper();
    public static GlobalTransformStateDataHelper Instance { get { return _instance; } }
    private GlobalTransformStateDataHelper() {}

    public Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData ToProto(Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData();
        proto.Position = Improbable.Math.CoordinatesHelper.Instance.ToProto(data.Position);
        proto.Rotation = Improbable.Corelib.Math.QuaternionHelper.Instance.ToProto(data.Rotation);
        proto.Pivot = Improbable.Math.Vector3dHelper.Instance.ToProto(data.Pivot);
        proto.Timestamp = data.Timestamp;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData MergeFromProto(Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData proto, bool[] statesToClear, Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData data)
    {
        return new Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData(
            proto.Position != null ? Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Position) : data.Position,
            proto.Rotation != null ? Improbable.Corelib.Math.QuaternionHelper.Instance.FromProto(proto.Rotation) : data.Rotation,
            proto.Pivot != null ? Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Pivot) : data.Pivot,
            proto.TimestampSpecified ? proto.Timestamp : data.Timestamp
        );
    }

    public Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData FromProto(Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData proto)
    {
        return new Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData(
            Improbable.Math.CoordinatesHelper.Instance.FromProto(proto.Position),
            Improbable.Corelib.Math.QuaternionHelper.Instance.FromProto(proto.Rotation),
            Improbable.Math.Vector3dHelper.Instance.FromProto(proto.Pivot),
            proto.Timestamp
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Transforms.Global.GlobalTransformStateData protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.Position != null)
        {
            protoTo.Position = protoFrom.Position;
        }
        if (protoFrom.Rotation != null)
        {
            protoTo.Rotation = protoFrom.Rotation;
        }
        if (protoFrom.Pivot != null)
        {
            protoTo.Pivot = protoFrom.Pivot;
        }
        if (protoFrom.TimestampSpecified)
        {
            protoTo.Timestamp = protoFrom.Timestamp;
            protoTo.TimestampSpecified = protoFrom.TimestampSpecified;
        }
    }
}
}
