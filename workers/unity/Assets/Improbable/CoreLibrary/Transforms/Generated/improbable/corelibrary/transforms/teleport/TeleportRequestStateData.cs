// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.teleport.TeleportRequestStateData in improbable/corelibrary/transforms/teleport/teleport_request_state.proto.

namespace Improbable.Corelibrary.Transforms.Teleport
{
public struct TeleportRequestStateData : global::System.IEquatable<TeleportRequestStateData>
{
    public readonly Improbable.Math.Vector3d? LocalPosition;
    public readonly Improbable.Corelib.Math.Quaternion? LocalRotation;
    public readonly Improbable.Corelibrary.Transforms.Parent? Parent;
    public readonly int Request;

    public TeleportRequestStateData (Improbable.Math.Vector3d? localPosition,
        Improbable.Corelib.Math.Quaternion? localRotation,
        Improbable.Corelibrary.Transforms.Parent? parent,
        int request)
    {
        LocalPosition = localPosition;
        LocalRotation = localRotation;
        Parent = parent;
        Request = request;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is TeleportRequestStateData))
            return false;
        return Equals((TeleportRequestStateData) obj);
    }

    public static bool operator ==(TeleportRequestStateData obj1, TeleportRequestStateData obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(TeleportRequestStateData obj1, TeleportRequestStateData obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(TeleportRequestStateData obj)
    {
        return true
            && global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(LocalPosition, obj.LocalPosition)
            && global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(LocalRotation, obj.LocalRotation)
            && global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(Parent, obj.Parent)
            && Request.Equals(obj.Request);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + (LocalPosition != null ? LocalPosition.GetHashCode() : 0);
        res = (res * 977) + (LocalRotation != null ? LocalRotation.GetHashCode() : 0);
        res = (res * 977) + (Parent != null ? Parent.GetHashCode() : 0);
        res = (res * 977) + Request.GetHashCode();
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class TeleportRequestStateDataHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData, Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData>
{
    static readonly TeleportRequestStateDataHelper _instance = new TeleportRequestStateDataHelper();
    public static TeleportRequestStateDataHelper Instance { get { return _instance; } }
    private TeleportRequestStateDataHelper() {}

    public Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData ToProto(Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData data)
    {
        var proto = new Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData();
        if (data.LocalPosition != null) proto.LocalPosition = Improbable.Math.Vector3dHelper.Instance.ToProto(data.LocalPosition.Value);
        if (data.LocalRotation != null) proto.LocalRotation = Improbable.Corelib.Math.QuaternionHelper.Instance.ToProto(data.LocalRotation.Value);
        if (data.Parent != null) proto.Parent = Improbable.Corelibrary.Transforms.ParentHelper.Instance.ToProto(data.Parent.Value);
        proto.Request = data.Request;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData MergeFromProto(Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData proto, bool[] statesToClear, Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData data)
    {
        return new Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData(
            (proto.LocalPosition != null || statesToClear != null && statesToClear[0]) ? (proto.LocalPosition == null ? (Improbable.Math.Vector3d?) null : Improbable.Math.Vector3dHelper.Instance.FromProto(proto.LocalPosition)) : data.LocalPosition,
            (proto.LocalRotation != null || statesToClear != null && statesToClear[1]) ? (proto.LocalRotation == null ? (Improbable.Corelib.Math.Quaternion?) null : Improbable.Corelib.Math.QuaternionHelper.Instance.FromProto(proto.LocalRotation)) : data.LocalRotation,
            (proto.Parent != null || statesToClear != null && statesToClear[2]) ? (proto.Parent == null ? (Improbable.Corelibrary.Transforms.Parent?) null : Improbable.Corelibrary.Transforms.ParentHelper.Instance.FromProto(proto.Parent)) : data.Parent,
            proto.RequestSpecified ? proto.Request : data.Request
        );
    }

    public Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData FromProto(Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData proto)
    {
        return new Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData(
            proto.LocalPosition == null ? (Improbable.Math.Vector3d?) null : Improbable.Math.Vector3dHelper.Instance.FromProto(proto.LocalPosition),
            proto.LocalRotation == null ? (Improbable.Corelib.Math.Quaternion?) null : Improbable.Corelib.Math.QuaternionHelper.Instance.FromProto(proto.LocalRotation),
            proto.Parent == null ? (Improbable.Corelibrary.Transforms.Parent?) null : Improbable.Corelibrary.Transforms.ParentHelper.Instance.FromProto(proto.Parent),
            proto.Request
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Transforms.Teleport.TeleportRequestStateData protoTo, bool[] statesToClearTo)
    {
        if ((protoFrom.LocalPosition != null || statesToClearFrom != null && statesToClearFrom[0]))
        {
            statesToClearTo[0] = statesToClearFrom[0];
            protoTo.LocalPosition = protoFrom.LocalPosition;
        }
        if ((protoFrom.LocalRotation != null || statesToClearFrom != null && statesToClearFrom[1]))
        {
            statesToClearTo[1] = statesToClearFrom[1];
            protoTo.LocalRotation = protoFrom.LocalRotation;
        }
        if ((protoFrom.Parent != null || statesToClearFrom != null && statesToClearFrom[2]))
        {
            statesToClearTo[2] = statesToClearFrom[2];
            protoTo.Parent = protoFrom.Parent;
        }
        if (protoFrom.RequestSpecified)
        {
            protoTo.Request = protoFrom.Request;
            protoTo.RequestSpecified = protoFrom.RequestSpecified;
        }
    }
}
}
