// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.Parent in improbable/corelibrary/transforms/parent.proto.

namespace Improbable.Corelibrary.Transforms
{
public struct Parent : global::System.IEquatable<Parent>
{
    public readonly Improbable.EntityId ParentId;
    public readonly string Key;

    public Parent (Improbable.EntityId parentId,
        string key)
    {
        ParentId = parentId;
        Key = key;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is Parent))
            return false;
        return Equals((Parent) obj);
    }

    public static bool operator ==(Parent obj1, Parent obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(Parent obj1, Parent obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(Parent obj)
    {
        return true
            && ParentId.Equals(obj.ParentId)
            && string.Equals(Key, obj.Key);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + ParentId.GetHashCode();
        res = (res * 977) + (Key != null ? Key.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ParentHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Transforms.Parent, Schema.Improbable.Corelibrary.Transforms.Parent>
{
    static readonly ParentHelper _instance = new ParentHelper();
    public static ParentHelper Instance { get { return _instance; } }
    private ParentHelper() {}

    public Schema.Improbable.Corelibrary.Transforms.Parent ToProto(Improbable.Corelibrary.Transforms.Parent data)
    {
        var proto = new Schema.Improbable.Corelibrary.Transforms.Parent();
        proto.ParentId = Improbable.EntityIdHelper.Instance.ToProto(data.ParentId);
        proto.Key = data.Key;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Transforms.Parent MergeFromProto(Schema.Improbable.Corelibrary.Transforms.Parent proto, bool[] statesToClear, Improbable.Corelibrary.Transforms.Parent data)
    {
        return new Improbable.Corelibrary.Transforms.Parent(
            proto.ParentIdSpecified ? Improbable.EntityIdHelper.Instance.FromProto(proto.ParentId) : data.ParentId,
            proto.KeySpecified ? proto.Key : data.Key
        );
    }

    public Improbable.Corelibrary.Transforms.Parent FromProto(Schema.Improbable.Corelibrary.Transforms.Parent proto)
    {
        return new Improbable.Corelibrary.Transforms.Parent(
            Improbable.EntityIdHelper.Instance.FromProto(proto.ParentId),
            proto.Key
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Transforms.Parent protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Transforms.Parent protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.ParentIdSpecified)
        {
            protoTo.ParentId = protoFrom.ParentId;
            protoTo.ParentIdSpecified = protoFrom.ParentIdSpecified;
        }
        if (protoFrom.KeySpecified)
        {
            protoTo.Key = protoFrom.Key;
            protoTo.KeySpecified = protoFrom.KeySpecified;
        }
    }
}
}
