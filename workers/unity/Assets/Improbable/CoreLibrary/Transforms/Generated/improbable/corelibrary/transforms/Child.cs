// Generated by ProtocGenFabric. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.Child in improbable/corelibrary/transforms/child.proto.

namespace Improbable.Corelibrary.Transforms
{
public struct Child : global::System.IEquatable<Child>
{
    public readonly Improbable.EntityId ChildId;
    public readonly string Key;

    public Child (Improbable.EntityId childId,
        string key)
    {
        ChildId = childId;
        Key = key;
    }

    public override bool Equals(object obj)
    {
        if (!(obj is Child))
            return false;
        return Equals((Child) obj);
    }

    public static bool operator ==(Child obj1, Child obj2)
    {
        return obj1.Equals(obj2);
    }

    public static bool operator !=(Child obj1, Child obj2)
    {
        return !obj1.Equals(obj2);
    }

    public bool Equals(Child obj)
    {
        return true
            && ChildId.Equals(obj.ChildId)
            && string.Equals(Key, obj.Key);
    }

    public override int GetHashCode()
    {
        int res = 1327;
        res = (res * 977) + ChildId.GetHashCode();
        res = (res * 977) + (Key != null ? Key.GetHashCode() : 0);
        return res;
    }
}

//For internal use only, not to be used in user code.
public sealed class ChildHelper : global::Improbable.Tools.IProtoConverter<Improbable.Corelibrary.Transforms.Child, Schema.Improbable.Corelibrary.Transforms.Child>
{
    static readonly ChildHelper _instance = new ChildHelper();
    public static ChildHelper Instance { get { return _instance; } }
    private ChildHelper() {}

    public Schema.Improbable.Corelibrary.Transforms.Child ToProto(Improbable.Corelibrary.Transforms.Child data)
    {
        var proto = new Schema.Improbable.Corelibrary.Transforms.Child();
        proto.ChildId = Improbable.EntityIdHelper.Instance.ToProto(data.ChildId);
        proto.Key = data.Key;
        return proto;
    }

    //Shallow merge method
    public Improbable.Corelibrary.Transforms.Child MergeFromProto(Schema.Improbable.Corelibrary.Transforms.Child proto, bool[] statesToClear, Improbable.Corelibrary.Transforms.Child data)
    {
        return new Improbable.Corelibrary.Transforms.Child(
            proto.ChildIdSpecified ? Improbable.EntityIdHelper.Instance.FromProto(proto.ChildId) : data.ChildId,
            proto.KeySpecified ? proto.Key : data.Key
        );
    }

    public Improbable.Corelibrary.Transforms.Child FromProto(Schema.Improbable.Corelibrary.Transforms.Child proto)
    {
        return new Improbable.Corelibrary.Transforms.Child(
            Improbable.EntityIdHelper.Instance.FromProto(proto.ChildId),
            proto.Key
        );
    }

    //Shallow merge method
    public void MergeProto(Schema.Improbable.Corelibrary.Transforms.Child protoFrom, bool[] statesToClearFrom, Schema.Improbable.Corelibrary.Transforms.Child protoTo, bool[] statesToClearTo)
    {
        if (protoFrom.ChildIdSpecified)
        {
            protoTo.ChildId = protoFrom.ChildId;
            protoTo.ChildIdSpecified = protoFrom.ChildIdSpecified;
        }
        if (protoFrom.KeySpecified)
        {
            protoTo.Key = protoFrom.Key;
            protoTo.KeySpecified = protoFrom.KeySpecified;
        }
    }
}
}
