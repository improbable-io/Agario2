// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.improbable.corelibrary.transforms.TransformExceptionStateData in improbable/corelibrary/transforms/transform_exception_state.proto.

using System;
using Improbable.Core.Serialization;
using Improbable.Entity.State;

namespace Improbable.Corelibrary.Transforms
{
[ReaderInterface]
[CanonicalName("improbable.corelibrary.transforms.TransformExceptionState", 1901202)]
public interface TransformExceptionStateReader : IEntityStateReader
{
    Improbable.EntityId? ParentNotFound { get; }

    event System.Action<Improbable.EntityId?> ParentNotFoundUpdated;
}

public interface ITransformExceptionStateUpdater : IEntityStateUpdater
{
    void FinishAndSend();
    ITransformExceptionStateUpdater ParentNotFound(Improbable.EntityId? newValue);
}

[WriterInterface]
[CanonicalName("improbable.corelibrary.transforms.TransformExceptionState", 1901202)]
public interface TransformExceptionStateWriter : TransformExceptionStateReader, IUpdateable<ITransformExceptionStateUpdater> { }

public class TransformExceptionState : global::Improbable.Entity.State.StateBase<Improbable.Corelibrary.Transforms.TransformExceptionStateData, Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData>, TransformExceptionStateWriter, ITransformExceptionStateUpdater
{
    public TransformExceptionState(global::Improbable.EntityId entityId, Improbable.Corelibrary.Transforms.TransformExceptionStateData data, IStateSender sender)
        : base(entityId, data, sender, Improbable.Corelibrary.Transforms.TransformExceptionStateDataHelper.Instance) { }
    private static log4net.ILog LOGGER = log4net.LogManager.GetLogger(typeof(TransformExceptionState));
    private static bool ShouldLogFinishAndSendNoUpdate = true;
    private static bool ShouldLogUpdateNoFinishAndSend = true;

    protected override void LogFinishAndSendWithNoUpdate() {
        if (ShouldLogFinishAndSendNoUpdate)
        {
            ShouldLogFinishAndSendNoUpdate = false;
            LOGGER.ErrorFormat("Finish and send was called with no update in flight for entity {0}. " +
                               "This is probably due to having more StateUpdates in flight, which is an error. (Logged only once.)", EntityId);
        }
    }

    public Improbable.EntityId? ParentNotFound { get { return Data.ParentNotFound; } }

    private readonly global::System.Collections.Generic.List<System.Action<Improbable.EntityId?>> updatedCallbacksParentNotFound =
        new global::System.Collections.Generic.List<System.Action<Improbable.EntityId?>>();
    public event System.Action<Improbable.EntityId?> ParentNotFoundUpdated
    {
        add
        {
            updatedCallbacksParentNotFound.Add(value);
            value(Data.ParentNotFound);
        }
        remove { updatedCallbacksParentNotFound.Remove(value); }
    }

    override protected void UnsubscribeEventHandlersInternal(object visualizer)
    {
        UnsubscribeEventHandler(visualizer, updatedCallbacksParentNotFound);
    }

    public ITransformExceptionStateUpdater Update
    {
        get
        {
            if (Updating)
            {
                if (ShouldLogUpdateNoFinishAndSend)
                {
                    ShouldLogUpdateNoFinishAndSend = false;
                    LOGGER.ErrorFormat("Multiple state updates of entity {0} are in flight, which has undefined semantics. " +
                        "Each call to Update has to be followed by a FinishAndSend() before another call is made on the same state. (Logged only once.)", EntityId);
                }
            }
            else
            {
                Updating = true;
                Updater = new TransformExceptionStateUpdate(EntityId, new bool[1], new Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData());
            }
            return this;
        }
    }

    ITransformExceptionStateUpdater ITransformExceptionStateUpdater.ParentNotFound(Improbable.EntityId? newValue)
    {
        if ((Updater.Proto.ParentNotFoundSpecified || Updater.StatesToClear != null && Updater.StatesToClear[0]) || !global::Improbable.Util.Collections.CollectionUtil.OptionsEqual(ParentNotFound, newValue))
        {
            if (newValue != null)
                Updater.Proto.ParentNotFound = Improbable.EntityIdHelper.Instance.ToProto(newValue.Value);
            else
                Updater.Proto.ParentNotFoundSpecified = false;
            Updater.StatesToClear[0] = newValue == null;
        }
        return this;
    }

    override protected bool TriggerUpdatedEvents(Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData update, bool[] statesToClear)
    {
        bool anythingUpdated = false;
        bool updatedParentNotFound = (update.ParentNotFoundSpecified || statesToClear != null && statesToClear[0]);
        anythingUpdated |= updatedParentNotFound;
        if (updatedParentNotFound) TriggerCallbacks(updatedCallbacksParentNotFound, Data.ParentNotFound);

        if (anythingUpdated) TriggerPropertyUpdated();
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents(Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData stateUpdate)
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }

    override protected bool TriggerAllStateEvents()
    {
        bool anythingUpdated = false;
        return anythingUpdated;
    }
}

public class TransformExceptionStateUpdate : global::Improbable.Entity.State.StateUpdate<Improbable.Corelibrary.Transforms.TransformExceptionStateData, Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData>
{
    public const uint COMPONENT_ID = 1901202;
    public TransformExceptionStateUpdate(global::Improbable.EntityId entityId, bool[] statesToClear, Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData proto)
        : base(entityId, statesToClear, Improbable.Corelibrary.Transforms.TransformExceptionStateDataHelper.Instance, proto, COMPONENT_ID) { }

    public override IReadWriteEntityState CreateState(global::Improbable.EntityId entityId, IStateSender stateSender)
    {
        return new TransformExceptionState(entityId, GetData(), stateSender);
    }

    public static TransformExceptionStateUpdate ExtractFrom(global::Improbable.Protocol.ComponentUpdate proto)
    {
        var protoState = ProtoBuf.Extensible.GetValue<Schema.Improbable.Corelibrary.Transforms.TransformExceptionStateData>(proto.ComponentData, (int) COMPONENT_ID);
        bool[] statesToClear = new bool[1];
        for (int i = 0; i < proto.FieldsToClear.Count; i++)
        {
            statesToClear[FieldIdToIndex(proto.FieldsToClear[i])] = true;
        }
        return new TransformExceptionStateUpdate(global::Improbable.EntityIdHelper.Instance.FromProto(proto.EntityId), statesToClear, protoState);
    }

    private static uint FieldIdToIndex(uint id)
    {
        switch (id)
        {
            case 1: //parentNotFound
                return 0;
            default:
                throw new ArgumentException(string.Format("Unexpected error: {0} is not a valid clearable field number for state Improbable.Corelibrary.Transforms.TransformExceptionState.", id));
        }
    }

    override protected int SeqToId(int seqId) { return seqToId[seqId]; }
    private static int[] seqToId = { 1, };
}
}
